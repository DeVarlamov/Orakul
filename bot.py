import asyncio
import logging
import os
from aiogram import F
from logging.handlers import RotatingFileHandler
from aiogram.filters import Command
from aiogram import Bot, Dispatcher
from apps.ball_predictions.ball import ball_predictor, yes_or_no
from apps.relationship_layouts.layouts import (
    doom,
    love_predictor,
    love_yes_or_no,
    the_future_with_man,
    this_relationship
    )

from core.handlers.basic import (
    cmd_start,
    end_bot,
    start_bot,
    get_photo
    )


logger = logging.getLogger()
logger.setLevel(logging.INFO)
file_handler = RotatingFileHandler(
    'logfile.txt',)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)

logger.addHandler(file_handler)

logger.info('–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞')
logger.info('–ï—â–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞')


async def start():
    bot = Bot(token=os.getenv('TOKEN'), parse_mode='HTML')
    dp = Dispatcher()
# =================== –†–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—è –•–µ–¥–ª–µ—Ä–æ–≤ ================
    dp.startup.register(start_bot)
    dp.shutdown.register(end_bot)

    dp.message.register(get_photo, F.photo)

    dp.message.register(cmd_start, Command(commands=['start', 'Menu']))
    dp.message.register(ball_predictor, F.text == "–®–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (–¥–∞/–Ω–µ—Ç)")
    dp.message.register(yes_or_no, F.text == "–£–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç")
    dp.message.register(
        love_predictor, F.text == '–†–∞—Å–∫–ª–∞–¥—ã –Ω–∞ –ª—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è')
    dp.message.register(love_yes_or_no, F.text == '–õ—é–±–∏—Ç/–Ω–µ –ª—é–±–∏—Ç')
    dp.message.register(doom, F.text == '–ö—Ç–æ –º–æ—è —Å—É–¥—å–±–∞?')
    dp.message.register(this_relationship,
                        F.text == '–ï—Å—Ç—å –ª–∏ –±—É–¥—É—â–µ–µ —É —ç—Ç–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π?')
    dp.message.register(the_future_with_man,
                        F.text == '–ß–µ–≥–æ –∂–¥–∞—Ç—å –≤ –ª—é–±–≤–∏ —Å —ç—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º?')

    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(start())

# # ===================== –ú–µ—Ç–æ–¥—ã –†–∞—Å–∫–ª–∞–¥—ã –Ω–∞ –¥–µ–Ω–µ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã ================
# @dp.message(F.text == "–†–∞—Å–∫–ª–∞–¥—ã –Ω–∞ –¥–µ–Ω–µ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
# async def money_issues(message: types.Message):
#     kb = [
#         [types.KeyboardButton(text="–ù–∞–π–¥—É –ª–∏ —è —Ä–∞–±–æ—Ç—É?")],
#         [types.KeyboardButton(text="–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é (–¢–∞—Ä–æ)")],
#         [types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
#     ]
#     keyboard = types.ReplyKeyboardMarkup(
#         keyboard=kb,
#         resize_keyboard=True,)
#     await message.reply("–æ–∫–µ–π, –∑–∞–¥—É–º–∞–π –≤–æ–ø—Ä–æ—Å",
#                         reply_markup=keyboard)


# @dp.message(F.text == "–ù–∞–π–¥—É –ª–∏ —è —Ä–∞–±–æ—Ç—É?")
# async def job_search(message: types.Message):
#     kb = [
#         [types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
#     ]
#     keyboard = types.ReplyKeyboardMarkup(
#         keyboard=kb,
#         resize_keyboard=True,)
#     result = Random_choise.get_random_str(WORK_BELT)
#     await message.answer('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–Ω–æ—Å—è—â–∏—Ö –ø—Ä–∏–±—ã–ª—åü§ëü§ëü§ë')
#     await asyncio.sleep(1)
#     GIF = Random_choise.get_random_smails(WORK_BELT_GIF)
#     await message.answer_sticker(GIF)
#     await asyncio.sleep(3)
#     await message.reply(f'"{result}"',
#                         reply_markup=keyboard)


# @dp.message(F.text == "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é (–¢–∞—Ä–æ)")
# async def job_search1(message: types.Message):
#     kb = [
#         [types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
#     ]
#     keyboard = types.ReplyKeyboardMarkup(
#         keyboard=kb,
#         resize_keyboard=True,)
#     await message.answer('–ó–∞–ø—Ä–æ—Å –∫ —Å—É–¥—å–±–µ üé¥üé¥üé¥')
#     await asyncio.sleep(1)
#     card, pack = get_random_card(CART)
#     photo = FSInputFile(card,)
#     GIF = Random_choise.get_random_smails(WORK_BELT_GIF)
#     await message.answer_sticker(GIF)
#     await asyncio.sleep(3)
#     await bot.send_photo(message.chat.id, photo, caption=pack,
#                          reply_markup=keyboard)

# # ===================–†–∞—Å–∫–ª–∞–¥—ã –Ω–∞ –±—É–¥—É—é—â–µ–µ –º–µ–Ω—é ===========================


# @dp.message(F.text == '–†–∞—Å–∫–ª–∞–¥—ã –Ω–∞ –±—É–¥—É—â–µ–µ')
# async def future_layouts(message: types.Message):
#     kb = [
#         [types.KeyboardButton(text="–°–æ–≤–µ—Ç –í–µ—â–µ–≥–æ –í–æ—Ä–æ–Ω–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é.")],
#         [types.KeyboardButton(text="–û–±—â–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å (–¢–∞—Ä–æ)")],
#         [types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
#     ]
#     keyboard = types.ReplyKeyboardMarkup(
#         keyboard=kb,
#         resize_keyboard=True,)
#     await message.reply("–æ–∫–µ–π, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?",
#                         reply_markup=keyboard)


# # ======================== –†–∞—Å–∫–ª–∞–¥—ã –Ω–∞ –±—É–¥—É—é—â–µ–µ ===========================
# @dp.message(F.text == '–û–±—â–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å (–¢–∞—Ä–æ)')
# async def recommendations(message: types.Message):
#     kb = [
#         [types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
#     ]
#     keyboard = types.ReplyKeyboardMarkup(
#         keyboard=kb,
#         resize_keyboard=True,)
#     await message.answer('–ó–∞–ø—Ä–æ—Å –∫ —Å—É–¥—å–±–µ üé¥üé¥üé¥')
#     await asyncio.sleep(1)
#     card, pack = get_random_card(CART_VORON)
#     photo = FSInputFile(card,)
#     GIF = Random_choise.get_random_smails(WORK_BELT_GIF)
#     await message.answer_sticker(GIF)
#     await asyncio.sleep(3)
#     await bot.send_photo(message.chat.id, photo, caption=pack,
#                          reply_markup=keyboard)


# @dp.message(F.text == '–°–æ–≤–µ—Ç –í–µ—â–µ–≥–æ –í–æ—Ä–æ–Ω–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é.')
# async def recommendations_day(message: types.Message):
#     kb = [
#         [types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
#     ]
#     keyboard = types.ReplyKeyboardMarkup(
#         keyboard=kb,
#         resize_keyboard=True,)
#     result = Random_choise.get_random_str(BOLS_STORIS)
#     await message.answer('C–≤—è–∑—å —Å –∫–æ—Å–º–æ—Å–æ–º üï£üï§üï•')
#     await asyncio.sleep(1)
#     GIF = Random_choise.get_random_smails(GIF_FOR_BOLL)
#     await message.answer_sticker(GIF)
#     await asyncio.sleep(3)
#     await message.reply(f'—Ç–≤–æ–π –æ—Ç–≤–µ—Ç "{result}"',
#                         reply_markup=keyboard)


# # ====================== –ê–¥–º–∏–Ω–∫–∞ ===================================

# @dp.message(F.text == 'Admin_Taro')
# async def admin(message: types.Message):
#     admin_panel = [
#         [types.KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫o–Ω—Çe–Ω—Ç')],
#         [types.KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–≥–≥')],
#     ]
#     keyboard_admin = types.ReplyKeyboardMarkup(
#         keyboard=admin_panel,
#         resize_keyboard=True,
#     )
#     if message.from_user.id == int(os.getenv('ADMIN_ID')):
#         await message.answer('–í—ã –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞',
#                              reply_markup=keyboard_admin)
#     else:
#         await message.reply('–í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–Ω–æ')


# @dp.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–≥–≥')
# async def admin(message: types.Message):
#     admin_panel = [
#         [types.KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–≥–≥')],
#         [types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
#     ]
#     keyboard_admin = types.ReplyKeyboardMarkup(
#         keyboard=admin_panel,
#         resize_keyboard=True,
#     )
#     if message.from_user.id == int(os.getenv('ADMIN_ID')):
#         chat_ids = session.query(Subscriber.chat_id).all()
#         for chat_id in chat_ids:
#             try:
#                 chat_id = int(chat_id[0])
#                 await bot.send_message(chat_id,
#                                        message.text,
#                                        reply_markup=keyboard_admin)
#                 logger.info('—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ')
#             except Exception as e:
#                 logging.info(
#                     f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å'
#                     f'—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {str(e)}')
#         await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
#         await message.answer('–í—ã –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞', reply_markup=keyboard_admin)
#     else:
#         await message.reply('–í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ')


# ==================== –ó–∞–ø—É—Å–∫ ========================================
