import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram import F
from aiogram.types import FSInputFile
from dotenv import load_dotenv
from sqlalchemy import func
from constant import (
    BOLS_STORIS,
    CART,
    CART_VORON,
    FUTURE_MAN,
    GIF_FOR_BOLL,
    GIF_FOR_LOVE,
    LOVE_STORIS,
    THIS_RELATION,
    WORK_BELT,
    WORK_BELT_GIF
    )
from db_config import Subscriber, YesAndNo, session

from utils import (
    Random_choise,
    get_random_card
    )


load_dotenv()

logging.basicConfig(level=logging.INFO)
bot = Bot(token=os.getenv('TOKEN'))
dp = Dispatcher()


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–°—Ç–∞—Ä—Ç –±–æ—Ç–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π."""
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    subscriber = Subscriber(name=user_name, chat_id=user_id)
    session.add(subscriber)
    session.commit()
    kb = [
        [types.KeyboardButton(text='–®–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (–¥–∞/–Ω–µ—Ç)')],
        [types.KeyboardButton(text='–†–∞—Å–∫–ª–∞–¥—ã –Ω–∞ –ª—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è')],
        [types.KeyboardButton(text='–†–∞—Å–∫–ª–∞–¥—ã –Ω–∞ –¥–µ–Ω–µ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã')],
        [types.KeyboardButton(text='–†–∞—Å–∫–ª–∞–¥—ã –Ω–∞ –±—É–¥—É—â–µ–µ')],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,)
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! '
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ "–í–µ—â–∏–π –í–æ—Ä–æ–Ω"',
        reply_markup=keyboard
    )


@dp.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def menu_start(message: types.Message):
    """–ú–µ–Ω—é."""
    kb = [
        [types.KeyboardButton(text="–®–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (–¥–∞/–Ω–µ—Ç)",
                              color='green')],
        [types.KeyboardButton(text='–†–∞—Å–∫–ª–∞–¥—ã –Ω–∞ –ª—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è',
                              )],
        [types.KeyboardButton(text='–†–∞—Å–∫–ª–∞–¥—ã –Ω–∞ –¥–µ–Ω–µ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã')],
        [types.KeyboardButton(text='–†–∞—Å–∫–ª–∞–¥—ã –Ω–∞ –±—É–¥—É—â–µ–µ')],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,)
    await message.answer(
        f'{message.from_user.first_name}! '
        '–í–µ—â–∏–π –≤–æ—Ä–æ–Ω –ø–æ–¥—Å–∫–∞–∂–µ—Ç',
        reply_markup=keyboard
    )

# =======================–ú–µ—Ç–æ–¥—ã –†–∞—Å–∫–ª–∞–¥—ã –æ—Ç–Ω–æ—à–µ–Ω–∏–π ==================


@dp.message(F.text == "–†–∞—Å–∫–ª–∞–¥—ã –Ω–∞ –ª—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è")
async def love_predictor(message: types.Message):
    """–ú–µ–Ω—é —Ä–∞—Å–∫–ª–∞–¥–∞ –ª—é–±–≤–∏ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π."""
    kb = [
        [types.KeyboardButton(text="–õ—é–±–∏—Ç/–Ω–µ –ª—é–±–∏—Ç")],
        [types.KeyboardButton(text="–ï—Å—Ç—å –ª–∏ –±—É–¥—É—â–µ–µ —É —ç—Ç–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π?")],
        [types.KeyboardButton(text='–ß–µ–≥–æ –∂–¥–∞—Ç—å –≤ –ª—é–±–≤–∏ —Å —ç—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º?')],
        [types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],

    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,)
    await message.reply("–û–∫–µ–π",
                        reply_markup=keyboard)


@dp.message(F.text == "–õ—é–±–∏—Ç/–Ω–µ –ª—é–±–∏—Ç")
async def love_yes_or_no(message: types.Message):
    kb = [
        [types.KeyboardButton(text="–õ—é–±–∏—Ç/–Ω–µ –ª—é–±–∏—Ç")],
        [types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,)
    result = Random_choise.get_random_str(LOVE_STORIS)
    await message.answer('C–≤—è–∑—å —Å –ø–ª–∞–Ω–µ—Ç–æ–π –ª—é–±–≤–∏ üíìüíìüíì')
    await asyncio.sleep(1)
    GIF = Random_choise.get_random_smails(GIF_FOR_LOVE)
    await message.answer_sticker(GIF)
    await asyncio.sleep(3)
    await message.reply(f'–û—Ç–≤–µ—Ç "{result}"',
                        reply_markup=keyboard)


@dp.message(F.text == '–ï—Å—Ç—å –ª–∏ –±—É–¥—É—â–µ–µ —É —ç—Ç–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π?')
async def this_relationship(message: types.Message):
    kb = [
        [types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,)
    result = Random_choise.get_random_str(THIS_RELATION)
    await message.answer('C–≤—è–∑—å —Å –ø–ª–∞–Ω–µ—Ç–æ–π –ª—é–±–≤–∏ üíìüíìüíì')
    await asyncio.sleep(1)
    GIF = Random_choise.get_random_smails(GIF_FOR_LOVE)
    await message.answer_sticker(GIF)
    await asyncio.sleep(3)
    await message.reply(f'–û—Ç–≤–µ—Ç "{result}"',
                        reply_markup=keyboard)


@dp.message(F.text == '–ß–µ–≥–æ –∂–¥–∞—Ç—å –≤ –ª—é–±–≤–∏ —Å —ç—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º?')
async def the_future_with_man(message: types.Message):
    kb = [
        [types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,)
    result = Random_choise.get_random_str(FUTURE_MAN)
    await message.answer('C–≤—è–∑—å —Å –ø–ª–∞–Ω–µ—Ç–æ–π –ª—é–±–≤–∏ üíìüíìüíì')
    await asyncio.sleep(1)
    GIF = Random_choise.get_random_smails(GIF_FOR_LOVE)
    await message.answer_sticker(GIF)
    await asyncio.sleep(3)
    await message.reply(f'–û—Ç–≤–µ—Ç "{result}"',
                        reply_markup=keyboard)


# ====================== –ú–µ—Ç–æ–¥—ã —à–∞—Ä–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π ===================
@dp.message(F.text == "–®–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (–¥–∞/–Ω–µ—Ç)")
async def ball_predictor(message: types.Message):
    kb = [
        [types.KeyboardButton(text="–£–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç")],
        [types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],

    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,)
    await message.reply("–æ–∫–µ–π, –∑–∞–¥—É–º–∞–π –≤–æ–ø—Ä–æ—Å",
                        reply_markup=keyboard)


@dp.message(F.text == "–£–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç")
async def yes_or_no(message: types.Message):
    kb = [
        [types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,)
    result = session.query(YesAndNo).order_by(func.random()).first()
    await message.answer('C–≤—è–∑—å —Å –∫–æ—Å–º–æ—Å–æ–º üï£üï§üï•')
    await asyncio.sleep(1)
    GIF = Random_choise.get_random_smails(GIF_FOR_BOLL)
    await message.answer_sticker(GIF,)
    await asyncio.sleep(3)
    await message.reply(f'—Ç–≤–æ–π –æ—Ç–≤–µ—Ç "{result}"',
                        reply_markup=keyboard)


# ===================== –ú–µ—Ç–æ–¥—ã –†–∞—Å–∫–ª–∞–¥—ã –Ω–∞ –¥–µ–Ω–µ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã ==================
@dp.message(F.text == "–†–∞—Å–∫–ª–∞–¥—ã –Ω–∞ –¥–µ–Ω–µ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
async def money_issues(message: types.Message):
    kb = [
        [types.KeyboardButton(text="–ù–∞–π–¥—É –ª–∏ —è —Ä–∞–±–æ—Ç—É?")],
        [types.KeyboardButton(text="–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é (–¢–∞—Ä–æ)")],
        [types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,)
    await message.reply("–æ–∫–µ–π, –∑–∞–¥—É–º–∞–π –≤–æ–ø—Ä–æ—Å",
                        reply_markup=keyboard)


@dp.message(F.text == "–ù–∞–π–¥—É –ª–∏ —è —Ä–∞–±–æ—Ç—É?")
async def job_search(message: types.Message):
    kb = [
        [types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,)
    result = Random_choise.get_random_str(WORK_BELT)
    await message.answer('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–Ω–æ—Å—è—â–∏—Ö –ø—Ä–∏–±—ã–ª—åü§ëü§ëü§ë')
    await asyncio.sleep(1)
    GIF = Random_choise.get_random_smails(WORK_BELT_GIF)
    await message.answer_sticker(GIF)
    await asyncio.sleep(3)
    await message.reply(f'"{result}"',
                        reply_markup=keyboard)


@dp.message(F.text == "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é (–¢–∞—Ä–æ)")
async def job_search1(message: types.Message):
    kb = [
        [types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,)
    await message.answer('–ó–∞–ø—Ä–æ—Å –∫ —Å—É–¥—å–±–µ üé¥üé¥üé¥')
    await asyncio.sleep(1)
    card, pack = get_random_card(CART)
    photo = FSInputFile(card,)
    GIF = Random_choise.get_random_smails(WORK_BELT_GIF)
    await message.answer_sticker(GIF)
    await asyncio.sleep(3)
    await bot.send_photo(message.chat.id, photo, caption=pack,
                         reply_markup=keyboard)

# ===================–†–∞—Å–∫–ª–∞–¥—ã –Ω–∞ –±—É–¥—É—é—â–µ–µ –º–µ–Ω—é ===========================


@dp.message(F.text == '–†–∞—Å–∫–ª–∞–¥—ã –Ω–∞ –±—É–¥—É—â–µ–µ')
async def future_layouts(message: types.Message):
    kb = [
        [types.KeyboardButton(text="–°–æ–≤–µ—Ç –í–µ—â–µ–≥–æ –í–æ—Ä–æ–Ω–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é.")],
        [types.KeyboardButton(text="–û–±—â–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å (–¢–∞—Ä–æ)")],
        [types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,)
    await message.reply("–æ–∫–µ–π, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?",
                        reply_markup=keyboard)


# ======================== –†–∞—Å–∫–ª–∞–¥—ã –Ω–∞ –±—É–¥—É—é—â–µ–µ ===========================
@dp.message(F.text == '–û–±—â–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å (–¢–∞—Ä–æ)')
async def recommendations(message: types.Message):
    kb = [
        [types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,)
    await message.answer('–ó–∞–ø—Ä–æ—Å –∫ —Å—É–¥—å–±–µ üé¥üé¥üé¥')
    await asyncio.sleep(1)
    card, pack = get_random_card(CART_VORON)
    photo = FSInputFile(card,)
    GIF = Random_choise.get_random_smails(WORK_BELT_GIF)
    await message.answer_sticker(GIF)
    await asyncio.sleep(3)
    await bot.send_photo(message.chat.id, photo, caption=pack,
                         reply_markup=keyboard)


@dp.message(F.text == '–°–æ–≤–µ—Ç –í–µ—â–µ–≥–æ –í–æ—Ä–æ–Ω–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é.')
async def recommendations_day(message: types.Message):
    kb = [
        [types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,)
    result = Random_choise.get_random_str(BOLS_STORIS)
    await message.answer('C–≤—è–∑—å —Å –∫–æ—Å–º–æ—Å–æ–º üï£üï§üï•')
    await asyncio.sleep(1)
    GIF = Random_choise.get_random_smails(GIF_FOR_BOLL)
    await message.answer_sticker(GIF)
    await asyncio.sleep(3)
    await message.reply(f'—Ç–≤–æ–π –æ—Ç–≤–µ—Ç "{result}"',
                        reply_markup=keyboard)


# ==================== –ó–∞–ø—É—Å–∫ ========================================
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
